/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package basketballscoreboard;

// Import needed classes for the time from the Java standard library
import java.text.SimpleDateFormat; // yyyy-MM-dd HH:mm:ss
import java.util.Date; // Gets the current time of the local machine, think of it as a timestamp

/**
 *
 * @author Isabel
 */
public class Scoreboard extends javax.swing.JFrame {
    // Variables
    private int homeScore = 0;
    private int visitorScore = 0;
    
    private int quarter = 1;
    
    private long remainingTimeMillis = 720000; // 12 minutes in milliseconds
    private boolean timerRunning = false;
    private volatile boolean timerPaused = false;


    /**
     * Creates new form Scoreboard
     */
    public Scoreboard() {
        initComponents();
        
        // To update the initial display of remaining time
        RemainingTimeDisplay.setText(formatTime(remainingTimeMillis));
        
        // Start the timer
        startTimer();

        // Start a separate thread to update the current time
        startCurrentTimeUpdaterThread();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // Method for formatting time
    private String formatTime(long timeMillis) {
        // Convert milliseconds to a formatted time string (hh:mm:ss)
        long seconds = timeMillis / 1000;
        long minutes = seconds / 60;
        long hours = minutes / 60;
        seconds %= 60;
        minutes %= 60;
        hours %= 24;

        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }
    
    // Method to update the remaining time in a background thread
    private void startTimer() {
    if (!timerRunning) {
        timerRunning = true;
        Thread timerThread = new Thread(() -> {
            while (remainingTimeMillis > 0) {
                try {
                    Thread.sleep(1000); // Sleep for 1 second
                    if (!timerPaused) { // Controls the ability to pause and resume the timer
                        remainingTimeMillis -= 1000; // Decrement by 1 second
                        updateRemainingTime();
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            timerRunning = false;
        });
        timerThread.start();
        }
    }


    private void updateRemainingTime() {
        String formattedTime = formatTime(remainingTimeMillis); // Formatting the time
        RemainingTimeDisplay.setText(formattedTime); // Update the text field to reflect the formatted time
    }
    
    // Method to display current time
    private void updateCurrentTime() {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss"); 
        String currentTime = sdf.format(new Date()); // Fetches the current time, formats it
        CurrentTimeDisplay.setText(currentTime); // Update the text field with the current time
    }
    
    // Method to start a separate thread for updating the current time
    private void startCurrentTimeUpdaterThread() {
        Thread currentTimeThread = new Thread(() -> {
            while (true) {
                try {
                    Thread.sleep(1000); // Update current time every second
                    updateCurrentTime();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        currentTimeThread.setDaemon(true); // Set it as a daemon thread so it stops when the main application exits
        // Daemon thread helps ensure that this thread doesn't keep the application running after the main application window is closed
        currentTimeThread.start();
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HomeLabel = new javax.swing.JLabel();
        HomeScoreDisplay = new javax.swing.JTextField();
        HomeScoreIncrement = new javax.swing.JButton();
        HomeScoreDecrement = new javax.swing.JButton();
        VisitorLabel = new javax.swing.JLabel();
        VisitorScoreDisplay = new javax.swing.JTextField();
        VisitorScoreIncrement = new javax.swing.JButton();
        VisitorScoreDecrement = new javax.swing.JButton();
        QuarterLabel = new javax.swing.JLabel();
        QuarterDisplay = new javax.swing.JTextField();
        QuarterIncrement = new javax.swing.JButton();
        QuarterDecrement = new javax.swing.JButton();
        RemainingTimeLabel = new javax.swing.JLabel();
        RemainingTimeDisplay = new javax.swing.JTextField();
        RemainingTimeStop = new javax.swing.JButton();
        RemainingTimeResume = new javax.swing.JButton();
        RemainingTimeRestart = new javax.swing.JButton();
        CurrentTimeLabel = new javax.swing.JLabel();
        CurrentTimeDisplay = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        HomeLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        HomeLabel.setText("Home");

        HomeScoreDisplay.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        HomeScoreDisplay.setText("0");
        HomeScoreDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeScoreDisplayActionPerformed(evt);
            }
        });

        HomeScoreIncrement.setText("+");
        HomeScoreIncrement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeScoreIncrementActionPerformed(evt);
            }
        });

        HomeScoreDecrement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        HomeScoreDecrement.setText("-");
        HomeScoreDecrement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeScoreDecrementActionPerformed(evt);
            }
        });

        VisitorLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        VisitorLabel.setText("Visitor");

        VisitorScoreDisplay.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        VisitorScoreDisplay.setText("0");
        VisitorScoreDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisitorScoreDisplayActionPerformed(evt);
            }
        });

        VisitorScoreIncrement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        VisitorScoreIncrement.setText("+");
        VisitorScoreIncrement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisitorScoreIncrementActionPerformed(evt);
            }
        });

        VisitorScoreDecrement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        VisitorScoreDecrement.setText("-");
        VisitorScoreDecrement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisitorScoreDecrementActionPerformed(evt);
            }
        });

        QuarterLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        QuarterLabel.setText("Quarter");

        QuarterDisplay.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        QuarterDisplay.setText("1");
        QuarterDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuarterDisplayActionPerformed(evt);
            }
        });

        QuarterIncrement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        QuarterIncrement.setText("+");
        QuarterIncrement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuarterIncrementActionPerformed(evt);
            }
        });

        QuarterDecrement.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        QuarterDecrement.setText("-");
        QuarterDecrement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuarterDecrementActionPerformed(evt);
            }
        });

        RemainingTimeLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        RemainingTimeLabel.setText("Remaining Time");

        RemainingTimeDisplay.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        RemainingTimeDisplay.setText("0");
        RemainingTimeDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemainingTimeDisplayActionPerformed(evt);
            }
        });

        RemainingTimeStop.setText("STOP");
        RemainingTimeStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemainingTimeStopActionPerformed(evt);
            }
        });

        RemainingTimeResume.setText("RESUME");
        RemainingTimeResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemainingTimeResumeActionPerformed(evt);
            }
        });

        RemainingTimeRestart.setText("RESTART");
        RemainingTimeRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemainingTimeRestartActionPerformed(evt);
            }
        });

        CurrentTimeLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        CurrentTimeLabel.setText("Current Time");

        CurrentTimeDisplay.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        CurrentTimeDisplay.setText("0");
        CurrentTimeDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrentTimeDisplayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(QuarterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(QuarterDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(QuarterIncrement, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(QuarterDecrement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RemainingTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CurrentTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(CurrentTimeDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(RemainingTimeDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(RemainingTimeRestart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(RemainingTimeResume, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(RemainingTimeStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(VisitorScoreDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(VisitorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(VisitorScoreIncrement, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                    .addComponent(VisitorScoreDecrement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(HomeScoreDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HomeScoreIncrement, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(HomeScoreDecrement, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(VisitorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(VisitorScoreDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(HomeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HomeScoreDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(HomeScoreIncrement, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HomeScoreDecrement))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(VisitorScoreIncrement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VisitorScoreDecrement)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(QuarterLabel)
                            .addComponent(QuarterDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(QuarterIncrement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(QuarterDecrement)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RemainingTimeLabel)
                            .addComponent(RemainingTimeDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(RemainingTimeStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemainingTimeResume)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RemainingTimeRestart)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CurrentTimeDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CurrentTimeLabel))
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomeScoreDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeScoreDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HomeScoreDisplayActionPerformed

    private void VisitorScoreDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisitorScoreDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VisitorScoreDisplayActionPerformed

    private void HomeScoreIncrementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeScoreIncrementActionPerformed
        // TODO add your handling code here:
        homeScore++;
        HomeScoreDisplay.setText(String.valueOf(homeScore));
    }//GEN-LAST:event_HomeScoreIncrementActionPerformed

    private void VisitorScoreIncrementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisitorScoreIncrementActionPerformed
        // TODO add your handling code here:
        visitorScore ++;
        VisitorScoreDisplay.setText(String.valueOf(visitorScore));
    }//GEN-LAST:event_VisitorScoreIncrementActionPerformed

    private void HomeScoreDecrementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeScoreDecrementActionPerformed
        // TODO add your handling code here:
        if(homeScore > 0){
            homeScore--;
            HomeScoreDisplay.setText(String.valueOf(homeScore));
        }
    }//GEN-LAST:event_HomeScoreDecrementActionPerformed

    private void VisitorScoreDecrementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisitorScoreDecrementActionPerformed
        // TODO add your handling code here:
        if(visitorScore > 0){
            visitorScore--;
            VisitorScoreDisplay.setText(String.valueOf(visitorScore));
        }
    }//GEN-LAST:event_VisitorScoreDecrementActionPerformed

    private void QuarterDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuarterDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QuarterDisplayActionPerformed

    private void QuarterIncrementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuarterIncrementActionPerformed
        // TODO add your handling code here:
        if(quarter < 4){
            quarter++;
            QuarterDisplay.setText(String.valueOf(quarter));
        }
    }//GEN-LAST:event_QuarterIncrementActionPerformed

    private void QuarterDecrementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuarterDecrementActionPerformed
        // TODO add your handling code here:
        if(quarter > 1){
            quarter--;
            QuarterDisplay.setText(String.valueOf(quarter));
        }
    }//GEN-LAST:event_QuarterDecrementActionPerformed

    private void RemainingTimeDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemainingTimeDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RemainingTimeDisplayActionPerformed

    private void RemainingTimeStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemainingTimeStopActionPerformed
        // TODO add your handling code here:
        timerPaused = true;
    }//GEN-LAST:event_RemainingTimeStopActionPerformed

    private void RemainingTimeResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemainingTimeResumeActionPerformed
        // TODO add your handling code here:
        timerPaused = false;
        if (!timerRunning) {
            startTimer();
        }
    }//GEN-LAST:event_RemainingTimeResumeActionPerformed

    private void RemainingTimeRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemainingTimeRestartActionPerformed
        // TODO add your handling code here:
        remainingTimeMillis = 720000; // 12 minutes in milliseconds
        updateRemainingTime();
    }//GEN-LAST:event_RemainingTimeRestartActionPerformed

    private void CurrentTimeDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrentTimeDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CurrentTimeDisplayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Scoreboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Scoreboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Scoreboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Scoreboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(() -> {
        Scoreboard scoreboard = new Scoreboard();
        scoreboard.setVisible(true);
        scoreboard.startTimer(); // Start the timer when the application starts
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CurrentTimeDisplay;
    private javax.swing.JLabel CurrentTimeLabel;
    private javax.swing.JLabel HomeLabel;
    private javax.swing.JButton HomeScoreDecrement;
    private javax.swing.JTextField HomeScoreDisplay;
    private javax.swing.JButton HomeScoreIncrement;
    private javax.swing.JButton QuarterDecrement;
    private javax.swing.JTextField QuarterDisplay;
    private javax.swing.JButton QuarterIncrement;
    private javax.swing.JLabel QuarterLabel;
    private javax.swing.JTextField RemainingTimeDisplay;
    private javax.swing.JLabel RemainingTimeLabel;
    private javax.swing.JButton RemainingTimeRestart;
    private javax.swing.JButton RemainingTimeResume;
    private javax.swing.JButton RemainingTimeStop;
    private javax.swing.JLabel VisitorLabel;
    private javax.swing.JButton VisitorScoreDecrement;
    private javax.swing.JTextField VisitorScoreDisplay;
    private javax.swing.JButton VisitorScoreIncrement;
    // End of variables declaration//GEN-END:variables
}
